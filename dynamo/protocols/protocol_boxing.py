# **************************************************************************
# *
# * Authors:    David Herreros Calero (dherreros@cnb.csic.es)
# *             Scipion Team (scipion@cnb.csic.es)
# *
# *  BCU, Centro Nacional de Biotecnologia, CSIC
# *
# * This program is free software you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'scipion@cnb.csic.es'
# *
# **************************************************************************
from enum import Enum
from os.path import exists, abspath, join
import numpy as np
from dynamo.utils import getCatalogFile, dynamoCroppingResults2Scipion, createSetOfOutputCoords, getDynamoModels, \
    readModels, \
    getPickedFile, getCroppedFile, genMCode4CheckModelWfFromGUI, getFileMwFromGUI
from dynamo.viewers.DynamoTomoProvider import DynamoTomogramProvider
import pyworkflow.utils as pwutils
from pyworkflow import BETA
from pyworkflow.object import String
from pyworkflow.protocol import LEVEL_ADVANCED
from pyworkflow.protocol.params import PointerParam, IntParam, BooleanParam
from pyworkflow.utils.properties import Message
from pyworkflow.gui.dialog import askYesNo
from tomo.constants import BOTTOM_LEFT_CORNER
from tomo.objects import SetOfMeshes, Coordinate3D, SetOfCoordinates3D
from tomo.protocols import ProtTomoPicking
from dynamo import Plugin, VLL_FILE, CATALOG_BASENAME
from dynamo.viewers.views_tkinter_tree import DynamoTomoDialog


class OutputsBoxing(Enum):
    coordinates = SetOfCoordinates3D
    meshes = SetOfMeshes


class DynamoBoxing(ProtTomoPicking):
    """Manual vectorial picker from Dynamo. After choosing the Tomogram to be picked, the tomo slicer from Dynamo will
     be direclty loaded with all the models previously saved in the disk (if any).
     This picking will save the "user points" defined in a set of models and generate a set of meshes with them. In case
     the user carries out the workflow model for each of the models from the Dynamo GUI, a set of coordinates will be
     also created, containing all the interpolated coordinates, and the calculated orientation. It is possible to
     create several models at once in a given tomogram. Once the coordinates are defined, the models are automatically
     saved in the catalogue and registered."""

    _label = 'vectorial picking'
    _devStatus = BETA
    _possibleOutputs = OutputsBoxing

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.dlg = None
        self.dynModelsPathDict = {}  # Used to store the path where the corresponding models to a tomo are stored

    # --------------------------- DEFINE param functions ----------------------
    def _defineParams(self, form):
        ProtTomoPicking._defineParams(self, form)

        form.addParam('boxSize', IntParam, label="Box Size")
        form.addParam('modPrevMeshes', BooleanParam,
                      default=False,
                      label='Modify previous meshes?',
                      help='This option allows to add and/or remove coordinates to a previous SetOfMeshes')
        form.addParam('inputMeshes', PointerParam,
                      label="Input Meshes",
                      condition='modPrevMeshes',
                      allowsNull=True,
                      pointerClass='SetOfMeshes',
                      help='Select the previous SetOfMeshes you want to modify')
        form.addParam('deleteGenMFiles', BooleanParam,
                      default=True,
                      label='Remove the .m files generated after the execution?',
                      expertLevel=LEVEL_ADVANCED,
                      help='It can be useful for developers to check exactly what was .m files were generated by '
                           'Scipion and executed by Dynamo.')

    # --------------------------- INSERT steps functions ----------------------
    def _insertAllSteps(self):
        self._insertFunctionStep(self.convertInputStep)
        self._insertFunctionStep(self.launchDynamoBoxingStep, interactive=True)

    # --------------------------- STEPS functions -----------------------------
    def convertInputStep(self):
        """Initialize the catalogue"""
        # Create the vll (list of tomos) file
        vllFile = self._getExtraPath(VLL_FILE)
        tomoCounter = 1  # Matlab begins counting in 1
        with open(vllFile, 'w') as tomoFid:
            for tomo in self.inputTomograms.get().iterItems():
                tomoPath = abspath(tomo.getFileName())
                tomoFid.write(tomoPath + '\n')
                self.dynModelsPathDict[tomo.getTsId()] = self._getExtraPath(CATALOG_BASENAME, 'tomograms',
                                                                            'volume_%i' % tomoCounter, 'models')
                tomoCounter += 1

        catalogFile = getCatalogFile(self._getExtraPath(), withExt=False)
        if self.modPrevMeshes.get():
            # Save coordinates into .txt file for each tomogram and pass them to dynamo
            inputMeshes = self.inputMeshes.get()
            inputTomograms = self.inputTomograms.get()
            for tomo in inputTomograms:
                outFileCoord = self._getExtraPath(pwutils.removeBaseExt(tomo.getFileName())) + ".txt"
                coordsInCurrentTomo = []
                for coord in inputMeshes.iterCoordinates(tomo.getObjId()):
                    coordsInCurrentTomo.append(list(coord.getPosition(BOTTOM_LEFT_CORNER)) + [coord.getGroupId()])
                if coordsInCurrentTomo:
                    np.savetxt(outFileCoord, np.asarray(coordsInCurrentTomo), delimiter=' ')

            # Create small program to tell Dynamo to save the inputMeshes in a Ellipsoidal Vesicle Model
            contents = "dcm -create %s -fromvll %s\n" % (catalogFile, vllFile)
            contents += "catalogue=dread('%s')\n" % getCatalogFile(self._getExtraPath())
            contents += "nVolumes=length(catalogue.volumes)\n"
            contents += "for idv=1:nVolumes\n"
            contents += "tomoPath=catalogue.volumes{idv}.fullFileName()\n"
            contents += "tomoIndex=catalogue.volumes{idv}.index\n"
            contents += "[~,tomoName,~]=fileparts(tomoPath)\n"
            contents += "coordFile=fullfile('%s', tomoName '.txt']\n" % self._getExtraPath()
            contents += "if ~isfile(coordFile)\n"
            contents += "continue\n"
            contents += "end\n"
            contents += "coords_ids=readmatrix(coordFile,'Delimiter',' ')\n"
            contents += "idm_vec=unique(coords_ids(:,4))'\n"
            contents += "end\n"
            contents += "exit\n"
        else:
            contents = "dcm -create %s -vll %s\n" % (catalogFile, vllFile)

        codeFile = self._getExtraPath('coords2model.m')
        with open(codeFile, 'w') as codeFid:
            codeFid.write(contents)

        # Tell Dynamo to create the catalogue with the models
        args = ' %s' % codeFile
        self.runJob(Plugin.getDynamoProgram(), args, env=Plugin.getEnviron())

    def launchDynamoBoxingStep(self):
        tomoList = []
        for tomo in self.inputTomograms.get().iterItems():
            tomogram = tomo.clone()
            tomoList.append(tomogram)

        tomoProvider = DynamoTomogramProvider(tomoList, self._getExtraPath(), "txt")
        self.dlg = DynamoTomoDialog(None, self._getExtraPath(), provider=tomoProvider)

        # Open dialog to request confirmation to create output
        import tkinter as tk
        if askYesNo(Message.TITLE_SAVE_OUTPUT, Message.LABEL_SAVE_OUTPUT, tk.Frame()):
            self._createOutput()
            # Delete the .m generated files if requested
        if self.deleteGenMFiles.get():
            pwutils.cleanPattern(self._getExtraPath('*.m'))

    def _createOutput(self):
        saveCropped = False
        outCoords = None
        outPath = self._getExtraPath()
        precedents = self.inputTomograms.get()
        tomoFileDict = {abspath(tomo.getFileName()): tomo.clone() for tomo in precedents}
        # Create the output set of meshes (always produced)
        meshes = SetOfMeshes.create(self._getPath(), template='meshes%s.sqlite')
        meshes.setPrecedents(precedents)
        meshes.setSamplingRate(precedents.getSamplingRate())
        meshes.setBoxSize(self.boxSize.get())
        meshes._dynCatalogue = String(getCatalogFile(outPath))  # Extended attribute
        # Create the output set of coordinates (only for the models to which the user carried out the model workflow
        # from the Dynamo GUI
        tmpPath = self._getTmpPath()
        pickedFile = getPickedFile(tmpPath)
        croppedFile = getCroppedFile(tmpPath)
        dynamoModels = getDynamoModels(outPath)
        if dynamoModels:
            saveCropped = self.didUserMwInGui(dynamoModels, tmpPath)
            readModels(self, outPath, tmpPath, dynamoModels, savePicked=True, saveCropped=saveCropped)
            if saveCropped:
                outCoords = createSetOfOutputCoords(self._getPath(), outPath, precedents, boxSize=self.boxSize.get())
            # Save picked points to Scipion
            with open(pickedFile, 'r') as coordFile:
                for line in coordFile:
                    coord = Coordinate3D()
                    values = line.replace('\n', '').split('\t')
                    tomoFile = values[6]
                    tomo = tomoFileDict[tomoFile]
                    coord.setVolume(tomo)
                    coord.setTomoId(tomo.getTsId())
                    coord.setPosition(float(values[0]), float(values[1]), float(values[2]), BOTTOM_LEFT_CORNER)
                    coord.setGroupId(int(values[3]))
                    # Extended attributes
                    coord._dynModelName = String(values[4])
                    coord._dynModelFile = String(values[5])
                    meshes.append(coord)

            if saveCropped:
                dynamoCroppingResults2Scipion(outCoords, croppedFile, tomoFileDict)

        # Define outputs and relations
        outputDict = {self._possibleOutputs.meshes.name: meshes}
        if outCoords:
            outputDict[self._possibleOutputs.coordinates.name] = outCoords
        self._defineOutputs(**outputDict)
        self._defineSourceRelation(self.inputTomograms, meshes)
        if outCoords:
            self._defineSourceRelation(self.inputTomograms, outCoords)
        self._updateOutputSet(self._possibleOutputs.meshes.name, meshes, state=meshes.STREAM_CLOSED)

    def didUserMwInGui(self, dynamoModels, tmpPath):
        """Reads the generated models and creates an empty txt file in case the user carried out at least one
        model workflow from the boxing GUI"""
        mCode = genMCode4CheckModelWfFromGUI(dynamoModels, tmpPath)
        mCodeFile = self._getExtraPath('checkModelWfFromGUI.m')
        with open(mCodeFile, 'w') as codeFid:
            codeFid.write(mCode)
        args = ' %s' % mCodeFile
        Plugin.runDynamo(self, args)
        return exists(getFileMwFromGUI(tmpPath))

    # --------------------------- DEFINE info functions ----------------------
    @staticmethod
    def getMethods(output):
        msg = 'User picked %d particles ' % output.getSize()
        msg += 'with a particle size of %s.' % output.getBoxSize()
        return msg

    def _methods(self):
        methodsMsgs = []
        if self.getOutputsSize() >= 1:
            for key, output in self.iterOutputAttributes():
                msg = self.getMethods(output)
                methodsMsgs.append("%s: %s" % (self.getObjectTag(output), msg))
        else:
            methodsMsgs.append(Message.TEXT_NO_OUTPUT_CO)

        return methodsMsgs

